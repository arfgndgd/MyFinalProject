--Kütüphaneler

-DataAccess
-Core(.net core ile ilgisi yok)
EntityFrameworkCore.SqlServer


--ADIMLAR


Katmanlarý aç
Classlarý belirle
Katmanlara Abstract ve Concrete klasörlerini aç

DataAcces
Abstract classlarý aç 
IEntityRepository interfacei miras vermeli (Generic Repository pattern uygula)

Concrete classlarý aç
EntityFramework
Entities classlarýný implement et
Context classýný yaz/veritabaný baðlantýsýný yaz
Entities classlarýnda implement edilen metodlarý doldur

Business
Abstract metod ekle
Concrete classta metodlarý düzenle

Core **bu katman referans almaz
(tüm projelerde kullanabileceðimiz bir alt yapý) (.net core ile bir ilgisi yok) (bu katman ilk baþta açýlsa daha iyi)
DataAccess klasörü aç / IEntityRepository classýný buraya taþýdýk 
Entities klasörü aç / IEntity classýný buraya taþýdýk 
(namespaceleri düzenle, Entities katmanýndaki usingleri de düzenle)
EfEntityRepositoryBase classýný EntityFramework klasörüne ekledik
	Bu class için DataAccess içinde Concrete classlarýmýzdaki metodlarý ortak bir çatýda topladýk

DataAccess
Core'dan referans alýyoruz
Abstract classlarýn usingleri düzenlenmeli
Concrete classlara Core projesinden EfEntityRepositoryBase mirasý veriyoruz. <hangi class için, hangi veritabanýna göre>, abstractý kim

Entities
DTOs klasörü açtýk burada T-Sql join gibi operasyonlar için 
Ýlgili entityler göre dto classlarý açýyoruz
Çýplak class kalmamasý için Dto classlarýna miras verebilecek Core projesi içinde bir interface IDto classý açtýk.

DataAccess
IProductDal içerisine DTO classýmýza özel entity classýn detaylarýný getirecek bir List<ProductDetailDto> GetProductDetails(); metodu yazdýk 
EfProductDal içerisinde ise implement ettik

Business
IProductService içine de ayný methodu yazdýk, Manager classýnda implement ettik

Core
Utilities klasörü aç
Results klasörü aç(iþlem sonuçlarý için mesaj, baþarýlý gibi geri bildirimler...)
IResult interfacei açtýk (success, message..) get; readOnly metodlarý yazdýk
Result classý açtýk miras alýp implement ettik. get; readOnly

Business
IResult kullandýðýmýz için Service classýnda "voidli metodu" IResult'a çevirdik
Manager classýnda metodu düzenliyoruz çünkü geriye deðer döndürmesi gerekir. 
Alýnan hata için de Result classýna mesaj için constructor eklememiz gerekir.
Aþaðýdaki satýrdaki Result classlarýna göre de metodu düzenle

Core
Alýnan hata için de Result classýna mesaj için constructor eklememiz gerekir.
Result classýndan miras alacak SuccessResult ve ErrorResult classlarýný aç

Business
Constant(sabitler) klasörü aç (mesajlar,enumlar vs gibi sabitler)
Messages classý aç (static; class, method)
Manager classýndaki methodlara Mesaj classýný ekle

Service classýnda void olmayan metodlar için List<class> 'dan önce Core\Results klasörüne açtýðýmýz IDataResult interfaceini ekleyerek hem mesaj hem deðer döndüreceðiz(IResult'tan miras almalý)

Core 
IDataResult içinde geriye deðer döndüren bi yapý kurmak için <T> generic yapý kullanacaðýz
DataResult classý açýp implement edip constructor yazýyoruz
	**Result classý void metodlar için success ve mesaj döndürür
	**DataResult classý success,message ve data döndürür

Alýnan hata için de DataResult classýna mesaj için constructor eklememiz gerekir.
Result classýndan miras alacak SuccessDataResult ve ErrorDataResult classlarýný aç

Business
DataResult için implementleri düzenle
Manager classýndaki methodlara Mesaj classýný ekle

Api 
New Project/asp.net core web api
Controller ekle/ProductsController (Apide controller çoðul olarak isimlendirilir)
Action ekle

IoC Container yapýsýný kur (projemizde new edilen yapý yok configuresion olmalý)
	 Startup.cs içinde ConfigureServices/services.AddSingleton<IProductService,ProductManager>();
										 services.AddSingleton<IProductDal,EfProductDal>()

Business
Autofac-Autofac.Extras.DynamicProxy
DependencyResolvers klasörü aç
Autofac klasörü aç
AutofacBusinessModule classý aç
: Module (using Autofac)

WebApi
Startup.cs içinde AddSingleton'larý yorum satýra aldýk. 
Program.cs içinde CreateHostBuilder metoduna .UseServiceProviderFactory(new AutofacServiceProviderFactory()) ekle
(IoC yapýsý yerine Autofac kullan diyoruz)
											 .ConfigureContainer<ContainerBuilder> (yazdýðýmýz modülü ekliyoruz)			

	****Autofac'ten vazgeçmek istediðimizde yeni yapýmýzý DependencyResolvers içine kurup Program.cs'te yeni yapýlarýmýzý new'lesek yeterli olacaktýr.
	

Business (FluentValidation/Manage NuGet)
Validation/doðrulama ekleyeceðiz  
ValidationRules/FluentValidation files/ProductValidator class
Validationlarýmýzý buraya constructor içine yazacaðýz / productManager içinde ise add metodunda karþýlýyoruz

Core
CrossCuttingConcerns/Validation/ValidationTool class
ProductManager/ Add metodundan validationý al yukarýdaki classa ekle

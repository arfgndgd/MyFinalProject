--Kütüphaneler

-DataAccess
-Core(.net core ile ilgisi yok)
EntityFrameworkCore.SqlServer


--ADIMLAR


Katmanları aç
Classları belirle
Katmanlara Abstract ve Concrete klasörlerini aç

DataAcces
Abstract classları aç 
IEntityRepository interfacei miras vermeli (Generic Repository pattern uygula)

Concrete classları aç
EntityFramework
Entities classlarını implement et
Context classını yaz/veritabanı bağlantısını yaz
Entities classlarında implement edilen metodları doldur

Business
Abstract metod ekle
Concrete classta metodları düzenle

Core **bu katman referans almaz
(tüm projelerde kullanabileceğimiz bir alt yapı) (.net core ile bir ilgisi yok) (bu katman ilk başta açılsa daha iyi)
DataAccess klasörü aç / IEntityRepository classını buraya taşıdık 
Entities klasörü aç / IEntity classını buraya taşıdık 
(namespaceleri düzenle, Entities katmanındaki usingleri de düzenle)
EfEntityRepositoryBase classını EntityFramework klasörüne ekledik
	Bu class için DataAccess içinde Concrete classlarımızdaki metodları ortak bir çatıda topladık

DataAccess
Core'dan referans alıyoruz
Abstract classların usingleri düzenlenmeli
Concrete classlara Core projesinden EfEntityRepositoryBase mirası veriyoruz. <hangi class için, hangi veritabanına göre>, abstractı kim

Entities
DTOs klasörü açtık burada T-Sql join gibi operasyonlar için 
İlgili entityler göre dto classları açıyoruz
Çıplak class kalmaması için Dto classlarına miras verebilecek Core projesi içinde bir interface IDto classı açtık.

DataAccess
IProductDal içerisine DTO classımıza özel entity classın detaylarını getirecek bir List<ProductDetailDto> GetProductDetails(); metodu yazdık 
EfProductDal içerisinde ise implement ettik

Business
IProductService içine de aynı methodu yazdık, Manager classında implement ettik

Core
Utilities klasörü aç
Results klasörü aç(işlem sonuçları için mesaj, başarılı gibi geri bildirimler...)
IResult interfacei açtık (success, message..) get; readOnly metodları yazdık
Result classı açtık miras alıp implement ettik. get; readOnly

Business
IResult kullandığımız için Service classında "voidli metodu" IResult'a çevirdik
Manager classında metodu düzenliyoruz çünkü geriye değer döndürmesi gerekir. 
Alınan hata için de Result classına mesaj için constructor eklememiz gerekir.
Aşağıdaki satırdaki Result classlarına göre de metodu düzenle

Core
Alınan hata için de Result classına mesaj için constructor eklememiz gerekir.
Result classından miras alacak SuccessResult ve ErrorResult classlarını aç

Business
Constant(sabitler) klasörü aç (mesajlar,enumlar vs gibi sabitler)
Messages classı aç (static; class, method)
Manager classındaki methodlara Mesaj classını ekle

Service classında void olmayan metodlar için List<class> 'dan önce Core\Results klasörüne açtığımız IDataResult interfaceini ekleyerek hem mesaj hem değer döndüreceğiz(IResult'tan miras almalı)

Core 
IDataResult içinde geriye değer döndüren bi yapı kurmak için <T> generic yapı kullanacağız
DataResult classı açıp implement edip constructor yazıyoruz
	**Result classı void metodlar için success ve mesaj döndürür
	**DataResult classı success,message ve data döndürür

Alınan hata için de DataResult classına mesaj için constructor eklememiz gerekir.
Result classından miras alacak SuccessDataResult ve ErrorDataResult classlarını aç

Business
DataResult için implementleri düzenle
Manager classındaki methodlara Mesaj classını ekle

Api 
New Project/asp.net core web api
Controller ekle/ProductsController (Apide controller çoğul olarak isimlendirilir)
Action ekle

IoC Container yapısını kur (projemizde new edilen yapı yok configuration olmalı)
	 Startup.cs içinde ConfigureServices/services.AddSingleton<IProductService,ProductManager>();
										 services.AddSingleton<IProductDal,EfProductDal>()
										 
Business
Autofac-Autofac.Extras.DynamicProxy
DependencyResolvers klasörü aç
Autofac klasörü aç
AutofacBusinessModule classı aç
: Module (using Autofac)

WebApi
Startup.cs içinde AddSingleton'ları yorum satıra aldık. 
Program.cs içinde CreateHostBuilder metoduna .UseServiceProviderFactory(new AutofacServiceProviderFactory()) ekle
(IoC yapısı yerine Autofac kullan diyoruz)
											 .ConfigureContainer<ContainerBuilder> (yazdığımız modülü ekliyoruz)			

	****Autofac'ten vazgeçmek istediğimizde yeni yapımızı DependencyResolvers içine kurup Program.cs'te yeni yapılarımızı new'lesek yeterli olacaktır.
	

BUSINESS (FluentValidation/Manage NuGet)
Validation/doğrulama ekleyeceğiz  
ValidationRules/FluentValidation files/ProductValidator class
Validationlarımızı buraya constructor içine yazacağız / productManager içinde ise add metodunda karşılıyoruz

CORE
CrossCuttingConcerns/Validation/ValidationTool class
ProductManager/ Add metodundan validationı al yukarıdaki classa ekle

Utilities/Interceptors/(EnginDemirog github'tan aldık 3 class var)

	**Burada yazdığımız classlar sayesinde projemizin çalışma bekli değişecek. Yani bizim tüm metodlarımızın çalışmasından önce bu classlardaki metodlar çalışacak, önceliği belirlenecek, durumlarına göre try catch yapılarına girecek.

Aspect/Autofac/Validation files/(EnginDemirog github'tan)

Business
DependencyResolvers/Autofac
	AutofacBusinessModule içine Interceptorsa göre bir yapı ekledik 
Concrete classlarımız için (Product/Add metodu validation yorum satırı)
CSS/DatabaseLogger,FileLogger,ILogger 
ProductManager/ILoggerı constructora ekle (Dependency Injection)
AutofacBusinessModule > builder ekle ILogger, FileLogger

ProductManager ILogger silindi
IProductService Update metodu eklendi
Private şart blokları eklendi (Add metodu için)

İş Kuralları için bi klasör yapacağız
Core
Utilities/Business/BusinessRules
ProductManager içinde Add metoduna uygun şekilde iş metodu ve onun içine de private şart metodlarını ekliyoruz.

ProductManager içinde örneğin Category için bir şart bloğu yazacak isek ...Dal clası değilde ICategoryService classı tipinde değişken oluşturmak lazım. Bunun nedeni ise IService classları ilgili modelin dışında başka yerlerde kullanılsın diye yaratılır. Farklı bir Dal classını ilgisi olmayan Manager classına yazmak doğru değildir.

ICategoryService metodlarına IDataResult olarak düzelttik Manager classında implement ettik

AutofacBusinessModule içinde builder.Category olanları ekledik

Sql Server Object Explorer sekmesinden Users, OperationClaims, UserOperationClaims tablolarını ekledik
Core/Entities/Concrete/ buraya da classlarını oluşturduk

WebApi
appsettings.json => TokenOptions

Core
Utilities yeni klasörler; Encryption,Hashing,JWT
	Encryption
		HashingHelper classına kriptolama ile ilgili Create ve Verify metodlarını ekledik
		SigningCredentialHelper: hashlerken ve doğrularken kullandığımız "HMACSHA512" Cryptography classını kullandığımızı belirtmek için böyle bir class yazdık
	Hashing	
		SecurityKeyHelper classında WepApi katmanındaki appsettings.json içine yazdığımız SecurityKey
	JWT
		AccessToken
		ITokenHelper
		JwtHelper => Engin Demiroğ Github/NetCoreBackend/Utilities/Security/Jwt/JwtHelper.cs 
			System.IdentityModel.Tokens.Jwt, Microsoft.Extensions.Configuration, Microsoft.Extensions.Configuration.Binder
		Token Options => ""
		ClaimExtensions => Engin Demiroğ Github/NetCoreBackend/Core/Extensions
		ClaimsPrincipalExtensions => Engin Demiroğ Github/NetCoreBackend/Core/Extensions

Business 
	Business.BusinessAspect.Autofac klasörleri aç
		JWT için
		SecuredOperation=> Engin Demiroğ Github => NetCoreBackend/Business/BusinessAspects/Autofac/SecuredOperation.cs
				Microsoft.AspNetCore.Http;

Solution -Nuget => Autofac.Extensions.DependencyInjection for Business 
Business - Nuget => using Castle.DynamicProxy;
					using Microsoft.Extensions.DependencyInjection;
Core
	Core.Utilities.IoC klasörleri aç
		ServiceTool => Engin Demiroğ Github => NetCoreBackend/Core/Utilities/IoC/ServiceTool.cs

DataAccess
	EntityFramework/Abstract
		IUserDal =>  Engin Demiroğ Github: NetCoreBackend/DataAccess/Abstract/IUserDal.cs /
	EntityFramework/Abstract
		EfUserDal => Engin Demiroğ Github: NetCoreBackend/DataAccess/Concrete/EntityFramework/EfUserDal.cs

Business
	Abstract
		IUSerService => Engin Demiroğ Github: NetCoreBackend/Business/Abstract/IUserService.cs /
		IAuthService => Engin Demiroğ Github: NetCoreBackend/Business/Abstract/IAuthService.cs /
	Concrete
		UserManager => Engin Demiroğ Github: NetCoreBackend/Business/Concrete/UserManager.cs /
		AuthManager => Engin Demiroğ Github: NetCoreBackend/Business/Concrete/AuthManager.cs /
Entities
	DTOs
		UserForRegisterDto
		UserForLoginDto => Engin Demiroğ Github: NetCoreBackend/Entities/Dtos/UserForRegisterDto.cs /

WebApi
	AuthController => Engin Demiroğ Github:

Business 
	DependencyResolvers.Autofac.AutofacBusinessModule => builder: user,efuserdal,auth,jwthelper,ITokenHelper

WebApi
	Startup
		ConfigureService: yukarıda yaptığımız JWT olayını kullanacağımızı belirteceğimiz yer burasıdır(Engin Demiroğ Github)
		Configure : app.UseAuthentication();

Core
	Core.Utilities.IoC =>ICoreModule classı ekle (Startup içindeki IServiceCollection)
	DependencyResolvers klasörü aç
		CoreModule : ICoreModule implement et
	Extensions
				(Polymorphism; yarın başka bi modül oluşturursak ICoreModule'de implement edebiliriz)
		ServiceCollectionExtensions extension metodu yazabilmek iiçin o classın "static" olması lazım

WebApi
	Startup/ConfigureServices => services.AddDependencyResolvers(); (Core.Extensions / ServiceCollectionExtensions)


	****** TEST ******
	Ürün ekleyebilmek için ProductManager'ın bu [SecuredOperation("product.add,admin")] sayesinde "Yetkiniz Yok" uyarısı alırız
		Users tablosundaki Id ile OperationClaims tablosundaki Id'lerin uygun olanlarını alıp UserOperationClaims tablosuna ekledik

Cache sistemi yazacağız 
Core 
	CrossCuttingConcerns
		Caching
			ICacheManager
			
			Microsoft klasörü aç
				MemoryCacheManager classı ekle :ICacheManager miras al
					IMemoryCache (using Microsoft.Extensions.Caching.Memory;)				
				
	DependencyResolvers
		CoreModule => serviceCollection.AddMemoryCache();
					  serviceCollection.AddSingleton<ICacheManager, MemoryCacheManager>();

			MemoryCacheManager implamantasyonu tamamla
				RemoveByPattern metodu için Engin Demiroğ Github: NetCoreBackend/Core/CrossCuttingConcerns/Caching/Microsoft/MemoryCacheManager.cs 'dan aldık


*** Adapter Pattern : Aslında bunların hepsi .Net Core içerisinde var ancak biz bunları kendimize göre uyarlıyoruz

Core
	Aspect/Autofac/Caching/CacheAspect classı aç Engin Demiroğ Github: NetCoreBackend/Core/Aspects/Autofac/Caching/CacheAspect.cs  (using Microsoft.Extensions.DependencyInjection; .GetService<> için sıkıntı olursa ekle)

ProductManager GetAll ve GetById için [CahceAspect] attributeunu ekle

							******** TEST *************
Cacheleme yaptığımız için bir ürünü id ile ya da getall actionları ile çağırdığımızda bir kere cache alındığında belirli süre boyunca o ürünleri cacheten verir

Core
	.Aspects.Autofac.Caching
		CacheRemoveAspect : Engin Demiroğ Github: NetCoreBackend/Core/Aspects/Autofac/Caching/
	.Aspects.Autofac.Performance
		PerformanceAspect
	.Aspects.Autofac.Transaction
		TransactionScopeAspect

	DependecyResolvers
		CoreModule  => serviceCollection.AddSingleton<Stopwatch>();

Business
	ProductManager => Update actionı, Add actionı
	        [CacheRemoveAspect("IProductService.Get")]
			[PerformanceAspect(5)] //sistemde yavaşlama varsa beni uyar


			***** FRONTEND tarafında bi takım işler oldu *******
CORS hatası: Backendte bu apiye Frontendten ulaşılabilmesi için 
	gerekli konfigürasyon yapılmamış demektir.

WebAPi
	Startup
		ConfigureServices
		CORS injection ekledik => services.AddCors();

		Configure
		bu adresten gelen bütün isteklere güveniyorum demektir (frontend)
		app.UseCors(builder => builder.WithOrigins("http://localhost:4200/").AllowAnyHeader());
            
***FrontEndte ürün eklemek istediğimizde aldığımız validation hataları için bir merkezi sistem yazacağız
*** Aslında controller içinde try catch ile halledilebilir bir durum bu ama böyle bir merkezi sistem olması daha uygundur

Core > Extensions > ErrorDetail, ExceptionMiddliware, ExceptionMiddlewareExtensions classlarını ekle

Engin Demiroğ Github: NetCoreBackend/Core/Extensions/ExceptionMiddleware.cs /
					  NetCoreBackend/Core/Extensions/ErrorDetails.cs /
					  NetCoreBackend/Core/Extensions/ExceptionMiddlewareExtensions.cs /


	ValidationException => FluentValidation usingi ekle

	***** Middleware aslında bizim Startup classı içindeki Configure metodundaki elle eklediğimiz extra extensionlardır.

Core > Extensions        
	app.ConfigureCustomExceptionMiddleware(); 

ExceptionMiddliware
	HandleExceptionAsync => IEnumerable<ValidationFailure> errors;

ErrorDetails => ValidationErrorDetails new property => public IEnumerable<ValidationFailure> Errors { get; set; }
